import{G as c,J as l,Zc as C,a as u,b as n,l as t,n as a,t as o,yb as p}from"./chunk-RFUKYTJG.js";var h=class s{constructor(r){this.httpClient=r}apiUrl=C.API_URL;getActiveCourses(){return this.httpClient.get(`${this.apiUrl}/courses`).pipe(a(r=>r.filter(e=>e.isActive)),o(r=>(console.error("Error al obtener los cursos activos:",r),t(()=>new Error("No se pudieron obtener los cursos activos")))))}getInactiveCourses(){return this.httpClient.get(`${this.apiUrl}/courses`).pipe(a(r=>r.filter(e=>!e.isActive)),o(r=>(console.error("Error al obtener los cursos inactivos:",r),t(()=>new Error("No se pudieron obtener los cursos inactivos")))))}getCourseById(r){return this.httpClient.get(`${this.apiUrl}/courses/${r}`).pipe(o(e=>(console.error("Error al obtener el curso:",e),t(()=>new Error("Curso no encontrado")))))}createCourse(r){let e=n(u({},r),{isActive:!0,createdAt:new Date,updatedAt:new Date});return this.httpClient.post(`${this.apiUrl}/courses`,e).pipe(o(i=>(console.error("Error al crear el curso:",i),t(()=>new Error("No se pudo crear el curso")))))}deleteCourse(r){return this.httpClient.patch(`${this.apiUrl}/courses/${r}`,{isActive:!1,updatedAt:new Date}).pipe(o(e=>(console.error("Error al eliminar el curso:",e),t(()=>new Error("No se pudo eliminar el curso")))))}updateCourse(r,e){return this.httpClient.patch(`${this.apiUrl}/courses/${r}`,n(u({},e),{updatedAt:new Date})).pipe(o(i=>(console.error("Error al actualizar el curso:",i),t(()=>new Error("No se pudo actualizar el curso")))))}activateCourse(r){return this.httpClient.patch(`${this.apiUrl}/courses/${r}`,{isActive:!0}).pipe(o(e=>(console.error("Error al activar el curso:",e),t(()=>new Error("No se pudo activar el curso")))))}static \u0275fac=function(e){return new(e||s)(l(p))};static \u0275prov=c({token:s,factory:s.\u0275fac,providedIn:"root"})};export{h as a};
